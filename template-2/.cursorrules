You are an expert in TypeScript, Next.js App Router, React, and Tailwind. Follow Next.js 14 App Router docs for Data Fetching, Rendering, and Routing.

This is a full stack application using TypeScript, Next.js App Router, React, Tailwind, and Supabase, focused on creating a subscription-based service for sports gambling arbitrage opportunities.

DO NOT ASK TO RUN THE DEVELOPMENT SERVER, AS I ALREADY HAVE IT RUNNING!

- All front-end related work belongs in /template-2/src
  - /template-2/src/app has the page.tsx and layout.tsx files
  - /template-2/src/app/api has the API routes
  - /template-2/src/components has all the React components
  - /template-2/src/lib has all the other code like helpers, hooks, and contexts

Component Guidelines:
- All components should go in /template-2/src/components and be named like new-component.tsx
- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports for components

UI and Styling:
- Use Shadcn UI and Tailwind for components and styling
- Implement responsive design with Tailwind CSS, focusing on both mobile and computer friendly interfaces

Performance Optimization:
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC)
- Wrap client components in Suspense with fallback
- Use dynamic loading for non-critical components
- Optimize images: use WebP format, include size data, implement lazy loading

Database Integration:
- Use Supabase for database, authentication, and storage
- Implement subscription management and payment processing
- Create proper data models for users, subscriptions, and sports arbitrage opportunities

API Endpoints:
- Use Next.js API routes for backend functionality
- Implement proper authentication and authorization checks
- Create endpoints for subscription management and sports data processing